import marimo

__generated_with = "0.14.17"
app = marimo.App(width="medium")


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# **Broadcasting**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""J√° vimos que quando adicionamos um escalar a um array 1-D o escalar √© adicionado a **cada elemento** do array.""")
    return


@app.cell
def _(np):
    print(np.array([1, 2, 3]) + 0.5)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""√â como se o NumPy expandisse o escalar em um array de 3 elementos e ent√£o fizesse a adi√ß√£o **elemento a elemento** entre os arrays. (**O NumPy n√£o faz isso porque seria muito ineficiente**, mas seria uma forma de obter o mesmo resultado). Este √© um exemplo de **broadcasting**.""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// attention | Aten√ß√£o!

    **Nem todos** os pares de arrays s√£o **compat√≠veis** para broadcasting. Dimens√µes de um array s√£o compat√≠veis se forem **iguais** ou uma delas for **1**.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**Exmplo 1**:""")
    return


@app.cell
def _(np):
    np.random.seed(1234)
    _A = np.random.randint(low = 1, high = 10, size = (3, 4))
    _B = np.random.randint(low = 1, high = 10, size = (3, 1))

    # print(_A)
    # [[4 7 6 5]
    #  [9 2 8 7]
    #  [9 1 6 1]]

    # print(_B)
    # [[7]
    #  [3]
    #  [1]]

    # Compatibilidade

    _A.shape  # (3, 4)
    _B.shape  # (3, 1)
    ##           ^  ^
    ##           compat√≠veis

    print(_A + _B)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    Aqui, `A` √© um array 3x4 e `B` √© um array 3x1. **Come√ßamos comparando a √∫ltima dimens√£o de cada array**.

    1. Como a √∫ltima dimens√£o de `A` tem comprimento 4 e a √∫ltima dimens√£o de `B` tem comprimento 1, o NumPy poderia expandir `B` fazendo 4 c√≥pias dele ao longo de seu segundo eixo. Portanto, essas dimens√µes s√£o compat√≠veis.
    2. Agora, precisamos comparar a primeira dimens√£o de `A` e `B`. Como ambas t√™m comprimento 3, elas s√£o compat√≠veis.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// tip | Dica

    M√©todos como o `newaxis` e o `reshape` podem ser usados para tentar arrays compat√≠veis para o **broadcasting**.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# **Indexa√ß√£o Booleana**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Com a indexa√ß√£o booleana, voc√™ pode **subdividir/fatiar** um array A usando outro array B de valores booleanos, que funciona como uma **m√°scara**.""")
    return


@app.cell
def _(np):
    array_ib = np.array([
        [3, 9, 7],
        [2, 0, 3],
        [3, 3, 1]
    ])

    mascara = array_ib == 3
    print(mascara)
    return array_ib, mascara


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Podemos usar `mascara` para **identificar/filtrar** elementos de `array_ib` que s√£o **iguais a 3**.""")
    return


@app.cell
def _(array_ib, mascara):
    print(array_ib[mascara])
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Fancy Indexing**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Assim como arrays de inteiros, podemos usar arrays booleanas 1-D para **selecionar linhas ou colunas espec√≠ficas** de um array 2-D.""")
    return


@app.cell
def _(array_ib):
    print(array_ib)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Ainda usando a **indexa√ß√£o booleana normal**, podemos selecionar as linhas da seguinte forma:""")
    return


@app.cell
def _(array_ib, np):
    r13 = np.array([True, False, True]) # linhas 1 e 3
    r23 = np.array([False, True, True]) # linhas 2 e 3

    print('Linhas 1 e 3:\n', array_ib[r13])
    print('Linhas 2 e 3:\n', array_ib[r23])
    return r13, r23


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Agora, observe o que acontece a seguir:""")
    return


@app.cell
def _(array_ib, r13, r23):
    print(array_ib[r13, r23]) # isso √© equivalente a array_ib[[0,2], [1,2]]
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    O NumPy trata √≠ndices booleanos como √≠ndices inteiros, onde **os inteiros usados s√£o os √≠ndices dos elementos True**. Em outras palavras, **o NumPy trata o array de √≠ndices booleanos [True, False, True] como o array de √≠ndices inteiros [0, 2]** e **trata o array de √≠ndices booleanos [False, True, True] como o array de √≠ndices inteiros [1, 2]**.

    Portanto, `array_ib[r13, c23]` √© equivalente a `array_ib[[0, 2], [1, 2]]`. Lembre-se de que, ao **combinar arrays de √≠ndices** de linha e coluna dessa maneira, o NumPy usa os √≠ndices correspondentes de cada array de √≠ndices (**√≠ndice de linha com √≠ndice de linha, √≠ndice de coluna com √≠ndice de coluna)** para selecionar elementos do array de destino, neste caso, os elementos **(0, 1)** e **(2, 2)**.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// tip | Dica

    A t√©cnica de **fancy indexing** se baseia em fornecer uma **lista de √≠ndices para cada dimens√£o** que voc√™ quer selecionar. No caso, se voc√™ quer selecionar todas as linhas, mas apenas as colunas 1 e 2, use: `array_ib[:, [1, 2]]` ou `array_ib[:, [False, True, True]]`.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Operadores l√≥gicos**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**Operadores l√≥gicos** nos permitem **combinar arrays booleanos**. Eles incluem o operador "**bitwise-and**", o operador "**bitwise-or**" e o operador "**bitwise-xor**".""")
    return


@app.cell
def _(np):
    b1 = np.array([False, False, True, True])
    b2 = np.array([False, True, False, True])

    b1 & b2  # [False, False, False,  True], and
    b1 | b2  # [False,  True,  True,  True], or
    b1 ^ b2  # [False,  True,  True, False], xor (True apenas se diferentes!)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Um array de booleanos pode ser **negado** prefixando o operador `~`.""")
    return


@app.cell
def _(np):
    print(~np.array([False, True]))
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# **Randomiza√ß√£o e Generators**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Desde a vers√£o 1.17.0 do Numpy, **√© recomendado usar um [Generator]([http://](https://numpy.org/doc/stable/reference/random/generator.html#numpy.random.default_rng)) para produzir valores aleat√≥rios em vez de usar o [m√≥dulo random]([http://](https://numpy.org/doc/stable/reference/random/index.html?highlight=random#module-numpy.random))** diretamente.""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Exemplos**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**1) Amostra de n√∫meros inteiros, com substitui√ß√£o**: escolha tr√™s n√∫meros inteiros no intervalo de 1 a 6, com substitui√ß√£o.""")
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(seed=123)
    _sample = _generator.integers(low=1, high=7, size=3)

    print(_sample)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**2) Amostra de n√∫meros inteiros, sem substitui√ß√£o**: escolha tr√™s n√∫meros inteiros no intervalo de 0 a 9, sem substitui√ß√£o.""")
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(seed=123)
    _sample = _generator.choice(a=10, size=3, replace=False)

    print(_sample)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**3) Permuta√ß√£o**: embaralhe aleatoriamente as linhas de um array.""")
    return


@app.cell
def _(np):
    _teste = np.array([
        [1, 2],
        [3, 4],
        [5, 6],
        [7, 8],
        [9, 10]
    ])

    _generator = np.random.default_rng(seed=123)
    _teste_permut = _generator.permutation(_teste, axis=0)

    print(_teste_permut)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**4) Amostra de uma distribui√ß√£o uniforme**: retire uma amostra aleat√≥ria de quatro valores entre 1 e 2 e gere a sa√≠da como um array 2x2.""")
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(seed=123)
    _sample = _generator.uniform(low=1.0, high=2.0, size=(2, 2))

    print(_sample)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""**6) Amostra de uma distribui√ß√£o normal**: retire uma amostra aleat√≥ria de dois valores de uma distribui√ß√£o normal padr√£o e, em seguida, gere a sa√≠da como uma matriz 1-D de tamanho 2.""")
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(seed=123)
    _sample = _generator.normal(loc=0.0, scale=1.0, size=2)

    print(_sample)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# **Desafios**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Love Distance**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Professor Prick**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""### **My Try** üëΩ""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""## **Psycho Parent**""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""### **My Try** üëø""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""### **My Try** üëΩ""")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    Voc√™ √© um professor vingativo e uma das suas maiores irrita√ß√µes √© quando os alunos fazem as provas √†s pressas. Para dar uma li√ß√£o neles, voc√™ decide dar zeros aos tr√™s primeiros alunos que tirarem menos de sessenta pontos, na ordem em que entregaram as provas.

    Dado um conjunto unidimensional de n√∫meros inteiros, identifique os tr√™s primeiros valores menores que sessenta e substitua-os por zero.
    """
    )
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(80085)
    scores = np.round(_generator.uniform(low=30, high=100, size=15))

    print(scores)
    return (scores,)


@app.cell
def _(np, scores):
    # Encontra os √≠ndices onde o valor √© menor que 60
    indices = np.where(scores < 60)

    # Atribui o valor "0" aos elementos nos 3 primeiros √≠ndices
    scores[indices[0][:3]] = 0

    print('Resultado: ', scores)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Ansioso para deixar sua marca na Associa√ß√£o de Pais e Mestres, voc√™ decide que a melhor maneira de esconder ovos para a pr√≥xima ca√ßa aos ovos de P√°scoa √© usar o NumPy. Voc√™ representa o campo como uma matriz de 10x10 de 0's.""")
    return


@app.cell
def _(np):
    field = np.zeros(shape = (10, 10))

    print(field)
    return (field,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Insira 20 valores normais aleat√≥rios em locais aleat√≥rios (n√£o repetidos) na grade. Assim, voc√™ saber√° quanto doce esconder em cada local.""")
    return


@app.cell
def _(field, np):
    _generator = np.random.default_rng(seed=123)
    _values = _generator.normal(loc=0.0, scale=1.0, size=20)

    # Gera um array de 20 (len(_values)) n√∫meros inteiros aleat√≥rios entre 0 e 99 (field.siza)
    _indices = _generator.choice(field.size, len(_values), replace=False) 

    # Atribue os valores a uma view unidimensional de `field`
    field.ravel()[_indices] = _values

    print('Resposta:\n', field)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    /// tip | Dica

    O m√©todo `ravel()` tranforma um array multidimensional em unidimensional, ou seja, o **achata (flatten)**. Mas n√£o retorna uma c√≥pia ou altera o original, apenas apresenta uma **view (visualiza√ß√£o tempor√°ria)**.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    Voc√™ √© um "cientista de relacionamentos" e desenvolveu um question√°rio que determina a pontua√ß√£o de amor de uma pessoa ‚Äî um n√∫mero real entre 0 e 100. Sua teoria √© que duas pessoas com pontua√ß√µes de amor semelhantes devem formar uma boa combina√ß√£o üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®

    Dadas as pontua√ß√µes de amor de 10 pessoas diferentes, crie um array bidimensional onde `(i, j)` fornece a diferen√ßa absoluta entre as pontua√ß√µes de amor da pessoa `i` e da pessoa `j`.
    """
    )
    return


@app.cell
def _(np):
    _generator = np.random.default_rng(1010)
    love_scores = np.round(_generator.uniform(low=0, high=100, size=10), 2)

    print(love_scores)
    return (love_scores,)


@app.cell
def _(love_scores, np):
    np.set_printoptions(linewidth=999) # configura√ß√£o de output
    # Adiciona 1 eixo a cada dimens√£o e faz a subtra√ß√£o (10, 1) - (1, 10)
    _resultado = np.abs(love_scores[:, np.newaxis] - love_scores[np.newaxis, :])

    print('Resultado: \n', _resultado)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# **Depend√™ncias**""")
    return


@app.cell
def _():
    import marimo as mo
    import numpy as np
    return mo, np


if __name__ == "__main__":
    app.run()
